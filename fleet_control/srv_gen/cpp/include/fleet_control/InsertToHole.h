/* Auto-generated by genmsg_cpp for file /home/drl-mocap/ros_stacks/drl-youbot/fleet_control/srv/InsertToHole.srv */
#ifndef FLEET_CONTROL_SERVICE_INSERTTOHOLE_H
#define FLEET_CONTROL_SERVICE_INSERTTOHOLE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "hole_detection/Hole.h"
#include "std_msgs/Float64.h"



namespace fleet_control
{
template <class ContainerAllocator>
struct InsertToHoleRequest_ {
  typedef InsertToHoleRequest_<ContainerAllocator> Type;

  InsertToHoleRequest_()
  : hole()
  , angle()
  , hole_name()
  {
  }

  InsertToHoleRequest_(const ContainerAllocator& _alloc)
  : hole(_alloc)
  , angle(_alloc)
  , hole_name(_alloc)
  {
  }

  typedef  ::hole_detection::Hole_<ContainerAllocator>  _hole_type;
   ::hole_detection::Hole_<ContainerAllocator>  hole;

  typedef  ::std_msgs::Float64_<ContainerAllocator>  _angle_type;
   ::std_msgs::Float64_<ContainerAllocator>  angle;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _hole_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  hole_name;


  typedef boost::shared_ptr< ::fleet_control::InsertToHoleRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fleet_control::InsertToHoleRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct InsertToHoleRequest
typedef  ::fleet_control::InsertToHoleRequest_<std::allocator<void> > InsertToHoleRequest;

typedef boost::shared_ptr< ::fleet_control::InsertToHoleRequest> InsertToHoleRequestPtr;
typedef boost::shared_ptr< ::fleet_control::InsertToHoleRequest const> InsertToHoleRequestConstPtr;



template <class ContainerAllocator>
struct InsertToHoleResponse_ {
  typedef InsertToHoleResponse_<ContainerAllocator> Type;

  InsertToHoleResponse_()
  : success(false)
  {
  }

  InsertToHoleResponse_(const ContainerAllocator& _alloc)
  : success(false)
  {
  }

  typedef uint8_t _success_type;
  uint8_t success;


  typedef boost::shared_ptr< ::fleet_control::InsertToHoleResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fleet_control::InsertToHoleResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct InsertToHoleResponse
typedef  ::fleet_control::InsertToHoleResponse_<std::allocator<void> > InsertToHoleResponse;

typedef boost::shared_ptr< ::fleet_control::InsertToHoleResponse> InsertToHoleResponsePtr;
typedef boost::shared_ptr< ::fleet_control::InsertToHoleResponse const> InsertToHoleResponseConstPtr;


struct InsertToHole
{

typedef InsertToHoleRequest Request;
typedef InsertToHoleResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct InsertToHole
} // namespace fleet_control

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::fleet_control::InsertToHoleRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::fleet_control::InsertToHoleRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::fleet_control::InsertToHoleRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1ae607eed7ad1773a455dffa3e4ada13";
  }

  static const char* value(const  ::fleet_control::InsertToHoleRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1ae607eed7ad1773ULL;
  static const uint64_t static_value2 = 0xa455dffa3e4ada13ULL;
};

template<class ContainerAllocator>
struct DataType< ::fleet_control::InsertToHoleRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fleet_control/InsertToHoleRequest";
  }

  static const char* value(const  ::fleet_control::InsertToHoleRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::fleet_control::InsertToHoleRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hole_detection/Hole hole\n\
std_msgs/Float64 angle\n\
string hole_name\n\
\n\
================================================================================\n\
MSG: hole_detection/Hole\n\
bool found\n\
float64 width\n\
geometry_msgs/Point position\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: std_msgs/Float64\n\
float64 data\n\
";
  }

  static const char* value(const  ::fleet_control::InsertToHoleRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::fleet_control::InsertToHoleResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::fleet_control::InsertToHoleResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::fleet_control::InsertToHoleResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "358e233cde0c8a8bcfea4ce193f8fc15";
  }

  static const char* value(const  ::fleet_control::InsertToHoleResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x358e233cde0c8a8bULL;
  static const uint64_t static_value2 = 0xcfea4ce193f8fc15ULL;
};

template<class ContainerAllocator>
struct DataType< ::fleet_control::InsertToHoleResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fleet_control/InsertToHoleResponse";
  }

  static const char* value(const  ::fleet_control::InsertToHoleResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::fleet_control::InsertToHoleResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool success\n\
\n\
\n\
";
  }

  static const char* value(const  ::fleet_control::InsertToHoleResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::fleet_control::InsertToHoleResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::fleet_control::InsertToHoleRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.hole);
    stream.next(m.angle);
    stream.next(m.hole_name);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct InsertToHoleRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::fleet_control::InsertToHoleResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct InsertToHoleResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<fleet_control::InsertToHole> {
  static const char* value() 
  {
    return "e79a0046ad15ab2c2f4f4971fdf613aa";
  }

  static const char* value(const fleet_control::InsertToHole&) { return value(); } 
};

template<>
struct DataType<fleet_control::InsertToHole> {
  static const char* value() 
  {
    return "fleet_control/InsertToHole";
  }

  static const char* value(const fleet_control::InsertToHole&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<fleet_control::InsertToHoleRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e79a0046ad15ab2c2f4f4971fdf613aa";
  }

  static const char* value(const fleet_control::InsertToHoleRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<fleet_control::InsertToHoleRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fleet_control/InsertToHole";
  }

  static const char* value(const fleet_control::InsertToHoleRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<fleet_control::InsertToHoleResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e79a0046ad15ab2c2f4f4971fdf613aa";
  }

  static const char* value(const fleet_control::InsertToHoleResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<fleet_control::InsertToHoleResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fleet_control/InsertToHole";
  }

  static const char* value(const fleet_control::InsertToHoleResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // FLEET_CONTROL_SERVICE_INSERTTOHOLE_H

