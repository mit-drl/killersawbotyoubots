/* Auto-generated by genmsg_cpp for file /home/drl-mocap/ros_stacks/drl-youbot/fleet_control/srv/SearchHole.srv */
#ifndef FLEET_CONTROL_SERVICE_SEARCHHOLE_H
#define FLEET_CONTROL_SERVICE_SEARCHHOLE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "hole_detection/Hole.h"

namespace fleet_control
{
template <class ContainerAllocator>
struct SearchHoleRequest_ {
  typedef SearchHoleRequest_<ContainerAllocator> Type;

  SearchHoleRequest_()
  : hole_name()
  {
  }

  SearchHoleRequest_(const ContainerAllocator& _alloc)
  : hole_name(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _hole_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  hole_name;


  typedef boost::shared_ptr< ::fleet_control::SearchHoleRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fleet_control::SearchHoleRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SearchHoleRequest
typedef  ::fleet_control::SearchHoleRequest_<std::allocator<void> > SearchHoleRequest;

typedef boost::shared_ptr< ::fleet_control::SearchHoleRequest> SearchHoleRequestPtr;
typedef boost::shared_ptr< ::fleet_control::SearchHoleRequest const> SearchHoleRequestConstPtr;



template <class ContainerAllocator>
struct SearchHoleResponse_ {
  typedef SearchHoleResponse_<ContainerAllocator> Type;

  SearchHoleResponse_()
  : hole()
  {
  }

  SearchHoleResponse_(const ContainerAllocator& _alloc)
  : hole(_alloc)
  {
  }

  typedef  ::hole_detection::Hole_<ContainerAllocator>  _hole_type;
   ::hole_detection::Hole_<ContainerAllocator>  hole;


  typedef boost::shared_ptr< ::fleet_control::SearchHoleResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fleet_control::SearchHoleResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SearchHoleResponse
typedef  ::fleet_control::SearchHoleResponse_<std::allocator<void> > SearchHoleResponse;

typedef boost::shared_ptr< ::fleet_control::SearchHoleResponse> SearchHoleResponsePtr;
typedef boost::shared_ptr< ::fleet_control::SearchHoleResponse const> SearchHoleResponseConstPtr;


struct SearchHole
{

typedef SearchHoleRequest Request;
typedef SearchHoleResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SearchHole
} // namespace fleet_control

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::fleet_control::SearchHoleRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::fleet_control::SearchHoleRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::fleet_control::SearchHoleRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1352d8f8d313763b11ff5fb1d8be382a";
  }

  static const char* value(const  ::fleet_control::SearchHoleRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1352d8f8d313763bULL;
  static const uint64_t static_value2 = 0x11ff5fb1d8be382aULL;
};

template<class ContainerAllocator>
struct DataType< ::fleet_control::SearchHoleRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fleet_control/SearchHoleRequest";
  }

  static const char* value(const  ::fleet_control::SearchHoleRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::fleet_control::SearchHoleRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string hole_name\n\
\n\
";
  }

  static const char* value(const  ::fleet_control::SearchHoleRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::fleet_control::SearchHoleResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::fleet_control::SearchHoleResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::fleet_control::SearchHoleResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9a93ce7dac7d7f7b49862226978ebf28";
  }

  static const char* value(const  ::fleet_control::SearchHoleResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x9a93ce7dac7d7f7bULL;
  static const uint64_t static_value2 = 0x49862226978ebf28ULL;
};

template<class ContainerAllocator>
struct DataType< ::fleet_control::SearchHoleResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fleet_control/SearchHoleResponse";
  }

  static const char* value(const  ::fleet_control::SearchHoleResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::fleet_control::SearchHoleResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hole_detection/Hole hole\n\
\n\
\n\
================================================================================\n\
MSG: hole_detection/Hole\n\
bool found\n\
float64 width\n\
geometry_msgs/Point position\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::fleet_control::SearchHoleResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::fleet_control::SearchHoleResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::fleet_control::SearchHoleRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.hole_name);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SearchHoleRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::fleet_control::SearchHoleResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.hole);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SearchHoleResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<fleet_control::SearchHole> {
  static const char* value() 
  {
    return "325cb0df236f063238dc714aa855e7b8";
  }

  static const char* value(const fleet_control::SearchHole&) { return value(); } 
};

template<>
struct DataType<fleet_control::SearchHole> {
  static const char* value() 
  {
    return "fleet_control/SearchHole";
  }

  static const char* value(const fleet_control::SearchHole&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<fleet_control::SearchHoleRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "325cb0df236f063238dc714aa855e7b8";
  }

  static const char* value(const fleet_control::SearchHoleRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<fleet_control::SearchHoleRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fleet_control/SearchHole";
  }

  static const char* value(const fleet_control::SearchHoleRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<fleet_control::SearchHoleResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "325cb0df236f063238dc714aa855e7b8";
  }

  static const char* value(const fleet_control::SearchHoleResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<fleet_control::SearchHoleResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fleet_control/SearchHole";
  }

  static const char* value(const fleet_control::SearchHoleResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // FLEET_CONTROL_SERVICE_SEARCHHOLE_H

