/* Auto-generated by genmsg_cpp for file /home/drl-mocap/ros_stacks/drl-youbot/fleet_control/msg/VelTwist.msg */
#ifndef FLEET_CONTROL_MESSAGE_VELTWIST_H
#define FLEET_CONTROL_MESSAGE_VELTWIST_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Twist.h"
#include "std_msgs/Float64.h"

namespace fleet_control
{
template <class ContainerAllocator>
struct VelTwist_ {
  typedef VelTwist_<ContainerAllocator> Type;

  VelTwist_()
  : target()
  , velocity()
  {
  }

  VelTwist_(const ContainerAllocator& _alloc)
  : target(_alloc)
  , velocity(_alloc)
  {
  }

  typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _target_type;
   ::geometry_msgs::Twist_<ContainerAllocator>  target;

  typedef  ::std_msgs::Float64_<ContainerAllocator>  _velocity_type;
   ::std_msgs::Float64_<ContainerAllocator>  velocity;


  typedef boost::shared_ptr< ::fleet_control::VelTwist_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fleet_control::VelTwist_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct VelTwist
typedef  ::fleet_control::VelTwist_<std::allocator<void> > VelTwist;

typedef boost::shared_ptr< ::fleet_control::VelTwist> VelTwistPtr;
typedef boost::shared_ptr< ::fleet_control::VelTwist const> VelTwistConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::fleet_control::VelTwist_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::fleet_control::VelTwist_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace fleet_control

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::fleet_control::VelTwist_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::fleet_control::VelTwist_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::fleet_control::VelTwist_<ContainerAllocator> > {
  static const char* value() 
  {
    return "95bf03a87f5869f40f57f1412d35d311";
  }

  static const char* value(const  ::fleet_control::VelTwist_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x95bf03a87f5869f4ULL;
  static const uint64_t static_value2 = 0x0f57f1412d35d311ULL;
};

template<class ContainerAllocator>
struct DataType< ::fleet_control::VelTwist_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fleet_control/VelTwist";
  }

  static const char* value(const  ::fleet_control::VelTwist_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::fleet_control::VelTwist_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/Twist target\n\
std_msgs/Float64 velocity\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: std_msgs/Float64\n\
float64 data\n\
";
  }

  static const char* value(const  ::fleet_control::VelTwist_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::fleet_control::VelTwist_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::fleet_control::VelTwist_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.target);
    stream.next(m.velocity);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct VelTwist_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fleet_control::VelTwist_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::fleet_control::VelTwist_<ContainerAllocator> & v) 
  {
    s << indent << "target: ";
s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.target);
    s << indent << "velocity: ";
s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
  }
};


} // namespace message_operations
} // namespace ros

#endif // FLEET_CONTROL_MESSAGE_VELTWIST_H

