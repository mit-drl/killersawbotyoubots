/* Auto-generated by genmsg_cpp for file /home/drl-mocap/ros_stacks/drl-youbot/fleet_control/msg/Fleet.msg */
#ifndef FLEET_CONTROL_MESSAGE_FLEET_H
#define FLEET_CONTROL_MESSAGE_FLEET_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace fleet_control
{
template <class ContainerAllocator>
struct Fleet_ {
  typedef Fleet_<ContainerAllocator> Type;

  Fleet_()
  : group()
  {
  }

  Fleet_(const ContainerAllocator& _alloc)
  : group(_alloc)
  {
  }

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _group_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  group;


  typedef boost::shared_ptr< ::fleet_control::Fleet_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fleet_control::Fleet_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Fleet
typedef  ::fleet_control::Fleet_<std::allocator<void> > Fleet;

typedef boost::shared_ptr< ::fleet_control::Fleet> FleetPtr;
typedef boost::shared_ptr< ::fleet_control::Fleet const> FleetConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::fleet_control::Fleet_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::fleet_control::Fleet_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace fleet_control

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::fleet_control::Fleet_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::fleet_control::Fleet_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::fleet_control::Fleet_<ContainerAllocator> > {
  static const char* value() 
  {
    return "876a88f5c49c5bbe139b7da2e1201c49";
  }

  static const char* value(const  ::fleet_control::Fleet_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x876a88f5c49c5bbeULL;
  static const uint64_t static_value2 = 0x139b7da2e1201c49ULL;
};

template<class ContainerAllocator>
struct DataType< ::fleet_control::Fleet_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fleet_control/Fleet";
  }

  static const char* value(const  ::fleet_control::Fleet_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::fleet_control::Fleet_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string[]    group\n\
\n\
";
  }

  static const char* value(const  ::fleet_control::Fleet_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::fleet_control::Fleet_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.group);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Fleet_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fleet_control::Fleet_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::fleet_control::Fleet_<ContainerAllocator> & v) 
  {
    s << indent << "group[]" << std::endl;
    for (size_t i = 0; i < v.group.size(); ++i)
    {
      s << indent << "  group[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.group[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // FLEET_CONTROL_MESSAGE_FLEET_H

